// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// TODO: agregar tamaño de caracteres a los tokens

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// generator typegraphql {
//   provider           = "typegraphql-prisma"
//   output             = "../prisma/generated/type-graphql"
//   emitTranspiledCode = false
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Availability {
  id String @id @default(cuid())

  isBanned  Boolean @default(false) @map("is_banned")
  banReason String? @map("ban_reason")

  users   User[]
  drivers Driver[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("availabilities")
}

model Phone {
  id String @id @default(cuid())

  number     String? @unique @map("phone_number")
  otpCode    String? @map("otp_code")
  isVerified Boolean @default(false) @map("is_verified")

  users   User[]
  drivers Driver[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("phones")
}

model Location {
  id           String  @id @default(cuid())
  name         String?
  street       String
  instructions String?
  zip          String
  city         String
  latitude     Float
  longitude    Float

  fromTrip Trip[] @relation("fromLocation")
  toTrip   Trip[] @relation("toLocation")

  profile Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("locations")
}

model Profile {
  id String @id @default(cuid())

  name      String
  email     String?
  avatar    String
  dni       String?
  birthDate DateTime @map("birth_date")

  address   Location @relation(fields: [addressId], references: [id])
  addressId String

  users   User[]
  drivers Driver[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Session {
  id String @id @default(cuid())

  // Debería usar Redis para esto
  accessToken  String? @map("access_token")
  refreshToken String? @map("refresh_token")

  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model FacebookAccount {
  id String @id @default(cuid())

  facebookId          String @unique
  facebookAccessToken String

  User   User[]
  Driver Driver[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("facebook_accounts")
}

model User {
  id String @id @default(cuid())

  facebook          FacebookAccount @relation(fields: [facebookAccountId], references: [id])
  facebookAccountId String
  profile           Profile         @relation(fields: [profileId], references: [id])
  profileId         String
  phone             Phone           @relation(fields: [phoneId], references: [id])
  phoneId           String

  availability   Availability @relation(fields: [availabilityId], references: [id])
  availabilityId String

  ratings Rating[]

  trips Trip[]

  session Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Trip {
  id String @id @default(cuid())

  from           Location @relation("fromLocation", fields: [fromLocationId], references: [id])
  fromLocationId String
  to             Location @relation("toLocation", fields: [toLocationId], references: [id])
  toLocationId   String

  rating   Rating @relation(fields: [ratingId], references: [id])
  ratingId String

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trips")
}

model Driver {
  id String @id @default(cuid())

  facebook          FacebookAccount @relation(fields: [facebookAccountId], references: [id])
  facebookAccountId String
  profile           Profile         @relation(fields: [profileId], references: [id])
  profileId         String
  phone             Phone           @relation(fields: [phoneId], references: [id])
  phoneId           String

  availability   Availability @relation(fields: [availabilityId], references: [id])
  availabilityId String

  ratings    Rating[]
  trips      Trip[]
  session    Session[]
  membership DriverMembership[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("drivers")
}

model Vehicle {
  id String @id @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vehicles")
}

model DriverMembership {
  id String @id @default(cuid())

  // agregar propiedades como: pago por..., cantidad pagada, etc.

  expirationDate DateTime? @map("expiration_date")

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("drivers_memberships")
}

// Verificar si esto funciona bien
model Rating {
  id String @id @default(cuid())

  value   Float
  comment String?

  trips Trip[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ratings")
}
